\input texinfo @c -*-texinfo-*-
@setfilename irmo.info
@settitle The Irmo Multiplayer Game Library

@defcodeindex mo
@defcodeindex ob

@direntry
* Irmo: (irmo).		The Irmo abstracted network gaming library
@end direntry

@ifinfo
The Irmo networking library is a library for building 
multiplayer games
@end ifinfo

@titlepage
@title 
@author Simon Howard
@page
@end titlepage

@node Top, Overview, , (dir)

@top Contents

@menu
* Overview::			A brief introduction to the library and 
				the concepts of multiplayer gaming
* API Notes::			Notes on using the library
* Interface Specification::	Defining an interface to the game world
				through Interface Specification files
* World Representation::	How the game world data is represented
* Index::			Index of concepts
@end menu

@node Overview, API Notes, Top, Top
@chapter Overview

@section The Peer-to-Peer model

@cindex Peer-to-Peer model of multiplayer gaming

Traditional multiplayer games have been based on a peer-to-peer model.
In this, each player in the game acts as a ``peer''. This 
relies on modelling the game world as a deterministic system. The
only unpredictable input, therefore, is the input of the players into
the game. Each peer transmits the player's input to the other peers.
In this way each peer receives the same input and is ``syncronised''
to the others.

This has the advantage of being a very simple system to implement. However,
it has a number of disadvantages:

@itemize @bullet
@item 
Random input into the game is difficult to model. Typically this
involves using a pseudo random number generator where each node starts
from a common random seed. This is particularly important as game AI
typically makes heavy use of random numbers.  If different random
numbers are generated on different peers, they have the potential to
go ``out of sync''.

@item 
Fluctuations in the network traffic can have large effects on the 
playability of the game. Any interruption in traffic from one peer
in the game will cause the game to freeze until the connection is
resumed. As the probability of an interruption increases with the
number of peers, this model does not scale well to large numbers
of players.

@item 
Allowing players to join a game while in progress is difficult.
It is difficult to transmit the complete game state to a joining
peer. This is troublesome for the players as they must prearrange
games rather than simply joining one in progress.

@end itemize

@section Client-Server Model

@cindex Client-Server model of multiplayer gaming

The Client-Server model solves many of the 
problems inherent in the Peer-to-Peer model. In the 
Client-Server model, the game world exists in a server 
process, and the players send their input into this world from 
client processes, usually over a network connection. 
The server sends updates about the state of
the game world to the client processes.

Implementing an efficient client-server multiplayer engine is 
a difficult task. Most games implement a complete engine 
from scratch. The Irmo library aims to be a generic multiplayer
engine which can be used as a base for many different types of
multiplayer games and easily extended.

@section Extension Languages

@cindex Extension Languages

Another common theme in many modern games is that of extension
languages. Many games use a high level extension language to describe
the game logic while using a lower level language such as C
to perform operations such as graphical rendering. Examples of
this are Quake's ``QuakeC'' language and the AisleRiot solitaire
game's use of the Guile extension language.

While providing client-server functionality, Irmo also aims to
provide cross-language abstraction such that the server can
be written in a high level language with the client written
in a lower level language. For this reason, a language binding
already exists for the Ruby scripting language. Bindings are
planned for other high-level languages.

@node API Notes, Interface Specification, Overview, Top
@chapter API Notes

@section Compiling

@cindex pkg-config
@cindex Makefile options

Irmo uses the @code{pkg-config} system to store information about
the library and allow programs which use it to be built more 
easily. To find out more about @code{pkg-config}. Typically 
all that needs to be done is to add to the @code{CFLAGS}
and @code{LDFLAGS} variables of the @code{Makefile}:

@example
	CFLAGS += `pkg-config --cflags irmo`
	LDFLAGS += `pkg-config --libs irmo`
@end example

@section GLib

@cindex GLib

Irmo makes use of the GLib library. GLib provides implementations of
a number of common and useful data structures and algorithms, as well
as standardised type definitions for portability. 

While the API does not use the GLib library (the interface is plain 
C), a copy of the library is required to be installed to compile 
Irmo. You may also wish to use GLib in your own programs. More
information can be found in the GLib manual:

http://developer.gnome.org/doc/API/2.0/glib/

@section API Documentation

@cindex API Documentation
@cindex Doxygen

The basic concepts of the library are outlined in this manual. 
However, in-depth documentation of all the library routines is 
provided through the Doxygen documentation system. Information
about Doxygen can be found from the website:

http://www.doxygen.org/

@node Interface Specification, World Representation, API Notes, Top
@chapter Interface Specification

Irmo allows the programmer to describe the game world.  It is 
assumed that the world consists of a number of objects.  An
interface must first be defined describing these types of objects.
This is done by writing an Interface Specification File.

@section Interface Specification File

@cindex Interface Specification File

The following is an example of an Interface Specification file:

@example
// Irmo interface specification file for astro

class Object @{
        int16 x;
        int16 y;
        int16 angle;
        int16 scale;
@}

class PlayerObject : Object @{
        IrmoObjectID player;
@}

class Explosion : Object @{
        int8 time;
@}

class Missile : Object @{@}
class Asteroid : Object @{@}

class Player @{
        string name;
        int16 score;
        IrmoObjectID avatar;
@}

method fire(IrmoObjectID player);
@end example

Here a number of classes are defined. These define the types of object
which can exist within the game world. A base class is defined named
``Object'' for all objects within the game world which the player sees.
These objects all have a number of common properties: in this case,
a pair of x,y coordinates, an angle and a scale (size). 

A number of subclasses are made of this class using the `:' operator
for the particular different types of object.  Some of these subclasses
contain additional data in addition to the data inherited from the
parent class.  For example, the ``Explosion'' class contains a ``time''
variable; explosions in the game expand and this is used to indicate 
the current size of the explosion.

As well as game objects, objects are also created to represent each
player within the game. These contain information such as the player's 
name and current score.

Finally, the specification file allows methods to be declared. These
are methods which can be invoked by the clients on the world.

@section Base Types

There are several base types used for object variables and method 
arguments. These are:

@itemize @bullet
@item 
@code{int8} - 8 bit unsigned integer
@cindex int8

@item 
@code{int16} - 16 bit unsigned integer
@cindex int16

@item 
@code{int32} - 32 bit unsigned integer
@cindex int32

@item 
@code{IrmoObjectID} - A reference to an Irmo Object. All objects 
within a world have
a number by which they can be referenced. This is a variable
containing such an identifier.
@cindex IrmoObjectID

@item 
@code{string} - A text string.
@cindex string

@end itemize

@section Loading the Interface Specification

@cindex IrmoInterfaceSpec

The Interface Specification is loaded using the 
@code{irmo_interface_spec_new} function call. The library
includes a parser which parses the file given and returns a
@code{IrmoInterfaceSpec} object representing the interface.

@example
	IrmoInterfaceSpec *spec;

	spec = irmo_interface_spec_new("asteroids.if");
@end example

If an error occurs during parsing an error message is printed
to @code{STDERR} and the function returns @code{NULL}.

@node World Representation, Index, Interface Specification, Top
@chapter World Representation

@menu
* IrmoWorld::			
@end menu

@node IrmoWorld,  , World Representation, World Representation
@section IrmoWorld

@cindex IrmoWorld

Having defined the interface and types of object which can be 
created in the game world, Irmo then allows the programmer
to create these objects.

All objects are created within a ``container'' object, of
type @code{IrmoWorld}. A new @code{IrmoWorld} object is 
created using the
@code{irmo_world_new} function call. For example:

@example
	IrmoWorld *world;

	world = irmo_world_new(spec);
@end example

Creating a world object requires giving an interface specification,
as described in the previous section. @code{irmo_world_new} 
returns a pointer to the new world object.

Having created a world object, objects can be created within the
world with the types defined in the Interface Specification. Each object
in the world has a unique numeric identifier. A reference to the object
can be found from its ID using the @code{irmo_world_get_object_for_id}
function call. For example:

@example
	IrmoObject *object;

	// search for object 55

	object = irmo_world_get_object_for_id(world, 55);
@end example

If there is no object in the world with the identifier given, the function
returns @code{NULL}.

Similarly, it is possible to iterate over objects in an 
@code{IrmoWorld} using the @code{irmo_world_foreach_object}
function. This is performed by passing a pointer to a function to 
call for each object. For example:

@example
	void my_object_callback(IrmoObject *object, gpointer user_data)
	@{
		// ... perform operation for each object ...
	@}

	...

	irmo_world_foreach_object(world, NULL, my_object_callback, NULL);
@end example

The function allows the programmer to specify the name of a class: this
allows the iterator to iterate over only objects of a particular class.
If the class has subclasses, these are included as well.
In the above example, @code{NULL} is passed to specify all objects 
of any class. To iterate over all objects of the class @code{Player}
is done similarly:

@example
	void my_player_callback(IrmoObject *object, gpointer user_data)
	@{
		// ... perform some operation for each player ...
	@}

	...

	irmo_world_foreach_object(world, "Player", my_player_callback, NULL);
@end example

The user_data field allows a pointer to some extra data to also be 
passed  to the callback function. In these examples this is not being 
used and @code{NULL} is being passed.

@node Index, , World Representation, Top
@unnumbered Index
@printindex cp

@bye

